{"version":3,"file":"static/js/964.8a59f7f7.chunk.js","mappings":"mOACA,EAAuB,yB,SCoBvB,EAjBmB,SAAC,GAAyB,IAAvBA,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAS3B,OACE,kBAAMC,UAAWC,EAAQF,SATN,SAAAG,GACnBA,EAAEC,iBACF,IAAMC,EAAWF,EAAEG,OAAOC,SAASC,YAAYC,MAAMC,OACjDL,IAAaN,GACfC,EAASK,EAEZ,EAGC,WACE,kBAAOM,KAAK,OAAOC,KAAK,cAAcC,aAAY,OAAEd,QAAF,IAAEA,EAAAA,EAAS,MAC7D,mBAAQY,KAAK,SAAb,4BAGL,EClBD,EAAuB,qBAAvB,EAAuD,yBCkFvD,EAnCe,WACb,OAAwBG,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MAEXrB,EADc,IAAIsB,gBAAgBJ,EAASK,QACvBC,IAAI,UAAY,IAE1CC,EAAAA,EAAAA,YAAU,WACJzB,GACF0B,EAAAA,EAAAA,IAAkB1B,GAAO2B,MAAK,SAAAC,GAAQ,OAAIX,EAAQW,EAASC,QAArB,IAEtCZ,EAAQ,GAEX,GAAE,CAACjB,IAMJ,OACE,4BACE,SAAC,EAAD,CAAYA,MAAOA,EAAOC,SANH,SAAAK,GACzBc,EAAS,iBAAD,OAAkBd,GAC3B,KAKG,eAAIJ,UAAWC,EAAf,SACGa,EAAKc,KAAI,SAAAC,GAAK,OACb,yBACE,SAAC,KAAD,CAASC,GAAE,kBAAaD,EAAME,IAAM/B,UAAWC,EAA/C,SACG4B,EAAMG,SAFFH,EAAME,GADF,QAUtB,C","sources":["webpack://react-homework-template/./src/components/SearchForm/SearchForm.module.css?d6f1","components/SearchForm/SearchForm.jsx","webpack://react-homework-template/./src/pages/Movies/Movies.module.css?82ee","pages/Movies/Movies.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"SearchForm_form__o80os\"};","import React from 'react';\nimport s from './SearchForm.module.css';\nimport PropTypes from 'prop-types';\n\nconst SearchForm = ({ query, onSubmit }) => {\n  const handleSubmit = e => {\n    e.preventDefault();\n    const newQuery = e.target.elements.searchQuery.value.trim();\n    if (newQuery !== query) {\n      onSubmit(newQuery);\n    }\n  };\n\n  return (\n    <form className={s.form} onSubmit={handleSubmit}>\n      <input type=\"text\" name=\"searchQuery\" defaultValue={query ?? ''} />\n      <button type=\"submit\">Search movie</button>\n    </form>\n  );\n};\n\nexport default SearchForm;\n\nSearchForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n  query: PropTypes.string.isRequired,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"Movies_list__hqYjd\",\"listLink\":\"Movies_listLink__hKKEO\"};","import React, { useEffect, useState } from 'react';\nimport { NavLink, useLocation, useNavigate } from 'react-router-dom';\nimport { fetchSearchMovies } from 'services/api';\nimport SearchForm from 'components/SearchForm/SearchForm';\nimport s from './Movies.module.css';\n\n// const Movies = () => {\n//   const [data, setData] = useState([]);\n//   const location = useLocation();\n//   const navigate = useNavigate();\n//   const queryParams = new URLSearchParams(location.search);\n//   const query = queryParams.get('query') || '';\n\n//   useEffect(() => {\n//     if (query) {\n//       fetchSearchMovies(query).then(response => setData(response.results));\n//     } else {\n//       setData([]);\n//     }\n//   }, [query]);\n\n//   const handleSubmit = e => {\n//     e.preventDefault();\n//     const newQuery = e.target.elements.searchQuery.value.trim();\n//     if (newQuery !== query) {\n//       navigate(`/movies?query=${newQuery}`);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <form onSubmit={handleSubmit}>\n//         <input type=\"text\" name=\"searchQuery\" defaultValue={query} />\n//         <button type=\"submit\">Search movie</button>\n//       </form>\n//       <ul className={s.list}>\n//         {data.map(movie => (\n//           <li key={movie.id}>\n//             <NavLink to={`/movies/${movie.id}`} className={s.listLink}>\n//               {movie.title}\n//             </NavLink>\n//           </li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// };\n\nconst Movies = () => {\n  const [data, setData] = useState([]);\n  const location = useLocation();\n  const navigate = useNavigate();\n  const queryParams = new URLSearchParams(location.search);\n  const query = queryParams.get('query') || '';\n\n  useEffect(() => {\n    if (query) {\n      fetchSearchMovies(query).then(response => setData(response.results));\n    } else {\n      setData([]);\n    }\n  }, [query]);\n\n  const handleSearchSubmit = newQuery => {\n    navigate(`/movies?query=${newQuery}`);\n  };\n\n  return (\n    <div>\n      <SearchForm query={query} onSubmit={handleSearchSubmit} />\n      <ul className={s.list}>\n        {data.map(movie => (\n          <li key={movie.id}>\n            <NavLink to={`/movies/${movie.id}`} className={s.listLink}>\n              {movie.title}\n            </NavLink>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Movies;\n"],"names":["query","onSubmit","className","s","e","preventDefault","newQuery","target","elements","searchQuery","value","trim","type","name","defaultValue","useState","data","setData","location","useLocation","navigate","useNavigate","URLSearchParams","search","get","useEffect","fetchSearchMovies","then","response","results","map","movie","to","id","title"],"sourceRoot":""}